// Generated by CoffeeScript 1.3.1
(function() {

  define(["dojo/main", "util/doh/main", "clazzy/Deferred", "clazzy/Exception"], function(dojo, doh, Deferred, Exception) {
    return doh.register("clazzy.tests.Deferred", [
      {
        name: "SETUP",
        setUp: function(t) {
          var test;
          t.originalThrow = Exception.prototype.Throw;
          test = t;
          test.thrown = false;
          return Exception.prototype.Throw = function() {
            return test.thrown = true;
          };
        },
        runTest: function() {
          return doh.assertTrue(true);
        }
      }, {
        name: "resolve_data_callbackIsCalledWithData",
        setUp: function() {
          this.deferred = new Deferred();
          return this.data = 1;
        },
        runTest: function(t) {
          var d;
          d = new doh.Deferred();
          this.deferred.then(d.getTestCallback(function(data) {
            return doh.assertEqual(1, data);
          }));
          this.deferred.resolve(this.data);
          return d;
        }
      }, {
        name: "resolve_data_thenOfPromiseIsCalledWithData",
        setUp: function() {
          this.deferred = new Deferred();
          return this.data = 1;
        },
        runTest: function(t) {
          var d, promise;
          d = new doh.Deferred();
          promise = this.deferred.then(function(data) {
            return data;
          });
          promise.then(d.getTestCallback(function(data) {
            return doh.assertEqual(1, data);
          }));
          this.deferred.resolve(this.data);
          return d;
        }
      }, {
        name: "reject_exception_errbackIsCalledWithErrorValue",
        runTest: function(t) {
          var d, someError;
          this.deferred = new Deferred();
          someError = "SomeError";
          d = new doh.Deferred();
          this.deferred.then(function(data) {
            return 1;
          }, d.getTestCallback(function(error) {
            return doh.assertEqual(someError, error);
          }));
          this.deferred.reject(someError);
          return d;
        }
      }, {
        name: "cancel_null_errbackIsCalledWithException",
        runTest: function(t) {
          var d, error;
          this.deferred = new Deferred();
          error = this.error;
          d = new doh.Deferred();
          this.deferred.then(function(data) {
            return 1;
          }, d.getTestCallback(function(error) {
            return doh.assertTrue(error instanceof Exception);
          }));
          this.deferred.cancel();
          return d;
        }
      }, {
        name: "progress_data_progressIsCalled",
        setUp: function() {
          this.deferred = new Deferred();
          return this.data = 1;
        },
        runTest: function(t) {
          var d;
          d = new doh.Deferred();
          this.deferred.then(function() {
            return false;
          }, function() {
            return false;
          }, d.getTestCallback(function(data) {
            return doh.assertEqual(1, data);
          }));
          this.deferred.progress(this.data);
          return d;
        }
      }, {
        name: "addCallback_callback_CalladdCallbacksWithCallbackAndFalsy",
        setUp: function() {
          this.deferred = new Deferred();
          this.originalAddCallbacks = this.deferred.addCallbacks;
          this.deferred.addCallbacks = function(callback, errback) {
            return [callback, errback];
          };
          return this.callback = function(data) {
            return 1;
          };
        },
        runTest: function(t) {
          var result;
          result = this.deferred.addCallback(this.callback);
          doh.assertEqual(1, result[0]());
          return doh.assertTrue(!result[1]);
        },
        tearDown: function(t) {
          return this.deferred.addCallbacks = this.originalAddCallbacks;
        }
      }, {
        name: "addErrback_errback_CalladdCallbacksWithfalsyAndErrback",
        setUp: function() {
          this.deferred = new Deferred();
          this.originalAddCallbacks = this.deferred.addCallbacks;
          this.deferred.addCallbacks = function(callback, errback) {
            return [callback, errback];
          };
          return this.errback = function(data) {
            return 2;
          };
        },
        runTest: function(t) {
          var result;
          result = this.deferred.addErrback(this.errback);
          doh.assertEqual(2, result[1]());
          return doh.assertTrue(!result[0]);
        },
        tearDown: function(t) {
          return this.deferred.addCallbacks = this.originalAddCallbacks;
        }
      }, {
        name: "addBoth_callbackAndErrback_CalladdCallbacksWithCallbackEqualsErrback",
        setUp: function() {
          this.deferred = new Deferred();
          this.originalAddCallbacks = this.deferred.addCallbacks;
          this.deferred.addCallbacks = function(callback, errback) {
            return [callback, errback];
          };
          return this.callback = function(data) {
            return 1;
          };
        },
        runTest: function(t) {
          var result;
          result = this.deferred.addBoth(this.callback, this.errback);
          doh.assertEqual(1, result[0]());
          return doh.assertEqual(result[0], result[1]);
        },
        tearDown: function(t) {
          return this.deferred.addCallbacks = this.originalAddCallbacks;
        }
      }, {
        name: "addCallbacks_callbackAndErrback_callingThen",
        setUp: function() {
          this.deferred = new Deferred();
          this.originalThen = this.deferred.then;
          this.deferred.then = function(callback, errback, progress) {
            return this.result = [callback, errback, progress];
          };
          this.callback = function(data) {
            return 1;
          };
          return this.errback = function(error) {
            return 2;
          };
        },
        runTest: function(t) {
          this.deferred.addCallbacks(this.callback, this.errback);
          doh.assertEqual(1, this.deferred.result[0]());
          return doh.assertEqual(2, this.deferred.result[1]());
        },
        tearDown: function(t) {
          return this.deferred.then = this.originalThen;
        }
      }, {
        name: "resolveTwice_data_throws",
        setUp: function() {
          return this.deferred = new Deferred();
        },
        runTest: function(t) {
          this.deferred.then(function(data) {
            return false;
          });
          this.deferred.resolve(1);
          this.deferred.resolve(1);
          return doh.assertTrue(t.thrown);
        },
        tearDown: function(t) {
          return t.thrown = false;
        }
      }, {
        name: "TEARDOWN",
        setUp: function() {},
        runTest: function() {
          return doh.assertTrue(true);
        },
        tearDown: function(t) {
          return Exception.prototype.Throw = t.originalThrow;
        }
      }
    ]);
  });

}).call(this);
