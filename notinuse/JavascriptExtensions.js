// Generated by CoffeeScript 1.3.1
(function() {

  define([], function() {
    'use strict';

    var filter, getOwnPropertyNames, has, hasnt, indexOf, map, trim;
    indexOf = function(searchElement) {
      "use strict";

      var args, k, len, n, ret, t;
      if (typeof this === "undefined" || this === null) {
        throw new TypeError();
      }
      args = arguments;
      t = Object(this);
      len = t.length >>> 0;
      len === 0 && (ret = -1);
      n = 0;
      !(ret != null) && args.length > 0 && (n = (function() {
        n = Number(args[1]);
        if (n !== n) {
          return n = 0;
        } else {
          if (n !== 0 && n !== Infinity && n !== -Infinity) {
            return n = (n > 0 || -1) * Math.floor(Math.abs(n));
          }
        }
      })());
      n >= len && (ret = -1);
      k = (n >= 0 ? n : Math.max(len - Math.abs(n), 0));
      while (k < len) {
        if (k in t && t[k] === searchElement) {
          return k;
        }
        k++;
      }
      return ret || -1;
    };
    if (!Array.prototype.indexOf) {
      Array.prototype.indexOf = indexOf;
    }
    has = function(searchElement) {
      "use strict";
      if (typeof this === "undefined" || this === null) {
        throw new TypeError();
      }
      return this.indexOf(searchElement) !== -1;
    };
    hasnt = function(searchElement) {
      "use strict";
      if (typeof this === "undefined" || this === null) {
        throw new TypeError();
      }
      return this.indexOf(searchElement) === -1;
    };
    if (!Array.prototype.has) {
      Array.prototype.has = has;
    }
    if (!Array.prototype.hasnt) {
      Array.prototype.hasnt = hasnt;
    }
    filter = function(fun) {
      "use strict";

      var i, len, res, t, thisp, val;
      if (typeof this === "undefined" || this === null) {
        throw new TypeError();
      }
      t = Object(this);
      len = t.length >>> 0;
      if (typeof fun !== "function") {
        throw new TypeError();
      }
      res = [];
      thisp = arguments[1];
      i = 0;
      while (i < len) {
        if (i in t) {
          val = t[i];
          if (fun.call(thisp, val, i, t)) {
            res.push(val);
          }
        }
        i++;
      }
      return res;
    };
    if (!Array.prototype.filter) {
      Array.prototype.filter = filter;
    }
    map = function(callback, thisArg) {
      var A, O, T, k, kValue, len, mappedValue;
      T = void 0;
      A = void 0;
      k = void 0;
      if (typeof this === "undefined" || this === null) {
        throw new TypeError(" this is null or not defined");
      }
      O = Object(this);
      len = O.length >>> 0;
      if ({}.toString.call(callback) !== "[object Function]") {
        throw new TypeError(callback + " is not a function");
      }
      if (thisArg) {
        T = thisArg;
      }
      A = new Array(len);
      k = 0;
      while (k < len) {
        kValue = void 0;
        mappedValue = void 0;
        if (k in O) {
          kValue = O[k];
          mappedValue = callback.call(T, kValue, k, O);
          A[k] = mappedValue;
        }
        k++;
      }
      return A;
    };
    if (!Array.prototype.map) {
      Array.prototype.map = map;
    }
    getOwnPropertyNames = function(obj) {
      var keys, x;
      keys = [];
      if (typeof obj === "object" && obj !== null) {
        for (x in obj) {
          if (obj.hasOwnProperty(x)) {
            keys.push(x);
          }
        }
      }
      return keys;
    };
    if (typeof Object.getOwnPropertyNames !== "function") {
      Object.getOwnPropertyNames = getOwnPropertyNames;
    }
    trim = function() {
      return this.replace(/^\s+|\s+$/g, "");
    };
    if (!String.prototype.trim) {
      String.prototype.trim = trim;
    }
    return {
      Array: {
        indexOf: indexOf,
        has: has,
        hasnt: hasnt,
        filter: filter
      },
      Object: {
        getOwnPropertyNames: getOwnPropertyNames
      }
    };
  });

}).call(this);
