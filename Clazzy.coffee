define [
    "clazzy/Exception"
    "clazzy/BaseClass"
], (Exception, BaseClass) ->
    'use strict'

    #-----------------------------------------------
    # Help functions normaly generated by coffescript
    # TODO: Replace __proto__ 
    #-----------------------------------------------
    hasProp = Object::hasOwnProperty
    inherit = (child, parent) ->
        for key of parent 
            child[key] = parent[key] if hasProp.call(parent, key)
        ctor = () -> 
            this.constructor = child
            this
        ctor.prototype = parent.prototype
        child.prototype = new ctor
        return child

    chaining = (child, original, args) -> 
        chaining(child.prototype.constructor.__super__.constructor, original, args) if child.prototype.constructor.__super__
        child.prototype.constructor.apply original, args

    #-----------------------------------------------
    # Helper Functions
    # 
    #-----------------------------------------------
    _getInheritance = (inheritance, root)->
        if not inheritance 
            parent = BaseClass
        else if "function" is typeof inheritance 
            parent = inheritance
        else 
            parent = root
            for part in inheritance.split(".")
                parent = parent[part]
        parent

    _getNameSpace = (classname, root) ->
        nameSpace = ns = root
        for part in classname.split(".")
            ns[part] = {} if not ns[part]
            nameSpace = ns
            ns = ns[part]
        [nameSpace, part]
    #-----------------------------------------------
    # The Class define function
    # 
    #-----------------------------------------------
    Class = (classname, inheritance, interfaces = [], jsonObject = {}) -> 
        throw new Exception("TypeException", "Inheritance can not be an Array") if inheritance instanceof Array
        throw new Exception("TypeException", "Interfaces must be an Array or null/undefined") if interfaces and not (interfaces instanceof Array)
        root = if window? then window else {}

        parentClass = _getInheritance(inheritance, root) 
        (jsonObject.constructor = () ->) if not jsonObject.hasOwnProperty('constructor')

        #-----------------------------------------------
        # Find out which interfaces are really mixins
        #-----------------------------------------------
        interfaces = interfaces.filter (el)->
            el?
        mixins = interfaces.filter (el)-> 
            "function" is typeof el
        interfaces = interfaces.map (el)->
            return el.classname if el.classname?
            el
            
        #-----------------------------------------------
        # Create Namespace
        #-----------------------------------------------
        [nameSpace, part] = _getNameSpace(classname, root)
            
        nameSpace[part] = (() -> 
            Obj = () ->
                chaining(Obj, this, arguments)

            inherit(Obj, parentClass)

            for func in mixins
                for key of func.prototype
                    Obj.prototype[key] = func.prototype[key]
            for key of jsonObject
                Obj.prototype[key] = jsonObject[key]

            Obj.prototype.constructor.__super__ = parentClass.prototype
            Obj.prototype.__super__ = parentClass.prototype

            Obj.prototype._implements = () -> 
                return Obj.prototype.constructor.__super__._implements.call(this).concat(interfaces) 

            Obj.prototype._fullname = () -> 
                return [classname].concat(Obj.prototype.constructor.__super__._fullname.call(this))

            for own prop, func of Obj.prototype when "function" is typeof func
                (pprop = Obj.prototype[prop]).nom = prop
                pprop.cls = classname

            Obj.prototype.declaredClass = classname
            Obj.classname = classname
            return Obj
        )()
    if window? then window.Class = Class
    Class
    