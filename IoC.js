// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  define(["clazzy/Clazzy", "clazzy/namelocators/InterfaceNameLocator", "clazzy/abstraction/Lang", "clazzy/Lib", "clazzy/Deferred", "clazzy/TemplateRegistry", "clazzy/namelocators/TemplateNameLocator", "clazzy/Exception"], function(Class, locator, lang, lib, Deferred, tRegistry, tLocator, Exception) {
    var ioc, _alldependencies, _alldepreplaces, _allrequired, _allsingeltons, _allstores, _allvalues, _dependencies, _depreplaces, _ioc, _required, _singeltons, _store, _values;
    _alldependencies = [];
    _allstores = [];
    _allvalues = [];
    _allsingeltons = [];
    _allrequired = [];
    _alldepreplaces = [];
    _alldependencies[[locator.getConfig()]] = {};
    _allstores[[locator.getConfig()]] = {};
    _allvalues[[locator.getConfig()]] = {};
    _allsingeltons[[locator.getConfig()]] = {};
    _allrequired[[locator.getConfig()]] = {};
    _alldepreplaces[[locator.getConfig()]] = {};
    _dependencies = _alldependencies[[locator.getConfig()]];
    _store = _allstores[[locator.getConfig()]];
    _values = _allvalues[[locator.getConfig()]];
    _singeltons = _allsingeltons[[locator.getConfig()]];
    _required = _allrequired[[locator.getConfig()]];
    _depreplaces = _alldepreplaces[[locator.getConfig()]];
    _ioc = new (Class("clazzy._IoC", null, null, {
      instanciate: function(classname, values) {
        'use strict';
        var dependency, instance, instances, prop, value, _i, _len, _ref, _ref1;
        instances = {};
        if (((_ref = _dependencies[classname]) != null ? _ref.length : void 0) > 0) {
          _ref1 = _dependencies[classname];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            dependency = _ref1[_i];
            instances[dependency.interfacename] = this.instanciate(dependency.classname);
          }
        }
        instance = this.storeInstanceIfSingelton(classname, this.nu(classname, instances));
        for (prop in values) {
          value = values[prop];
          if (instance.set != null) {
            instance.set(prop, value);
          } else {
            instance[prop] = value;
          }
        }
        return instance;
      },
      "nu": function(classname, dependencies) {
        'use strict';
        var e;
        if (tLocator.hasTemplate(classname)) {
          dependencies.templateString = tRegistry.get(tLocator.findTemplate(classname));
        }
        dependencies = lang.mixin(dependencies, _values[classname] || {});
        if (lang.isFunction(_store[classname])) {
          try {
            return new _store[classname](dependencies);
          } catch (_error) {
            e = _error;
            (new Exception("UnableToNewException", "IoC crashed when trying to new " + classname + ". [" + e.toString() + "]")).Throw();
          }
        }
        return _store[classname];
      },
      storeInstanceIfSingelton: function(classname, instance) {
        'use strict';
        if (_singeltons[classname]) {
          _store[classname] = instance;
        }
        return instance;
      },
      require: function(classnames) {
        var answer, classname, existing, inProgress, modules, notInProcess, toBeRequired, _i, _j, _k, _len, _len1, _len2;
        toBeRequired = [];
        inProgress = [];
        notInProcess = [];
        answer = [];
        notInProcess = lang.filter(classnames, function(classname) {
          return _required[classname] == null;
        });
        for (_i = 0, _len = classnames.length; _i < _len; _i++) {
          classname = classnames[_i];
          if (_required[classname]) {
            answer.push(_required[classname]);
          }
        }
        for (_j = 0, _len1 = notInProcess.length; _j < _len1; _j++) {
          classname = notInProcess[_j];
          if (existing = lib.findClass(classname)) {
            answer.push(_required[classname] = new Deferred());
            this.registerExisting(classname, existing, _required[classname]);
            this.storeResult(classname);
          }
        }
        notInProcess = lang.filter(classnames, function(classname) {
          return _required[classname] == null;
        });
        if (notInProcess.length === 0) {
          return lib.deferList(answer);
        }
        for (_k = 0, _len2 = notInProcess.length; _k < _len2; _k++) {
          classname = notInProcess[_k];
          answer.push(_required[classname] = new Deferred());
          this.storeResult(classname);
        }
        notInProcess = this.placePluginsLast(notInProcess);
        modules = this.convertToAmdModuleNames(notInProcess);
        require(modules, this.ido(function() {
          var classes, cls, i, _l, _len3, _results;
          classes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _results = [];
          for (i = _l = 0, _len3 = classes.length; _l < _len3; i = ++_l) {
            cls = classes[i];
            _results.push(this.registerExisting(notInProcess[i], cls, _required[notInProcess[i]]));
          }
          return _results;
        }));
        return lib.deferList(answer);
      },
      storeResult: function(classname) {
        'use strict';
        return _required[classname].then(lang.partial(function(classname, retcls) {
          return _store[classname] = retcls;
        }, classname), lang.partial(function(classname) {
          return (new Exception("IoCException", "unable to require " + classname + " or one of its dependencies")).Throw();
        }, classname));
      },
      registerExisting: function(classname, existing, deferred) {
        'use strict';
        var cls, dependencies;
        cls = existing;
        dependencies = this.getDependencies(classname, cls);
        if (tLocator.hasTemplate(classname)) {
          dependencies = dependencies.concat(this.getTemplateDependencies(tRegistry.get(tLocator.findTemplate(classname))));
        }
        if (dependencies.length === 0) {
          return deferred.resolve(cls);
        }
        return this.require(dependencies).then(function() {
          return deferred.resolve(cls);
        }, function() {
          return deferred.reject();
        });
      },
      getDependencies: function(classname, cls) {
        'use strict';
        var classes, dep, interfaces, replacedInterfaces, _ref;
        if (_dependencies[classname] != null) {
          return _dependencies[classname];
        }
        interfaces = [];
        ((cls != null ? (_ref = cls.prototype) != null ? _ref.__dependencies : void 0 : void 0) != null) && (interfaces = cls.prototype.__dependencies);
        replacedInterfaces = this.replaceDependencies(classname, interfaces);
        classes = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = replacedInterfaces.length; _i < _len; _i++) {
            dep = replacedInterfaces[_i];
            _results.push(locator.findClass(dep));
          }
          return _results;
        })();
        this.registerDependencies(classname, classes, interfaces);
        return classes;
      },
      registerDependencies: function(classname, classes, interfaces) {
        'use strict';
        var i;
        if (!_dependencies[classname] && classes.length > 0) {
          _dependencies[classname] = (function() {
            var _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = classes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              _results.push({
                interfacename: interfaces[i],
                classname: classes[i]
              });
            }
            return _results;
          })();
        }
        return classes;
      },
      getTemplateDependencies: function(template) {
        'use strict';
        var depsD, depsL, match, re;
        depsL = [];
        depsD = {};
        re = /data-dojo-type=\s*['"](.*?)['"]/gi;
        while (match = re.exec(template)) {
          if (depsD[match[1]] == null) {
            depsL.push(match[1]);
          }
          depsD[match[1]] = 1;
        }
        return depsL;
      },
      placePluginsLast: function(classnames) {
        'use strict';
        var isplugin, name, nonplugins, plugins;
        isplugin = /!/;
        plugins = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = classnames.length; _i < _len; _i++) {
            name = classnames[_i];
            if (isplugin.test(name)) {
              _results.push(name);
            }
          }
          return _results;
        })();
        nonplugins = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = classnames.length; _i < _len; _i++) {
            name = classnames[_i];
            if (!isplugin.test(name)) {
              _results.push(name);
            }
          }
          return _results;
        })();
        return nonplugins.concat(plugins);
      },
      replaceDependencies: function(classname, interfaces) {
        var dep, _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = interfaces.length; _i < _len; _i++) {
          dep = interfaces[_i];
          _results.push(((_ref = _depreplaces[classname]) != null ? _ref[dep] : void 0) || dep);
        }
        return _results;
      },
      convertToAmdModuleNames: function(classnames) {
        'use strict';
        var classname, modules;
        modules = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = classnames.length; _i < _len; _i++) {
            classname = classnames[_i];
            _results.push(classname.indexOf("/") === -1 ? classname.replace(/\./g, "/") : classname);
          }
          return _results;
        })();
        return modules;
      }
    }))();
    ioc = new (Class("clazzy.IoC", null, null, {
      register: function(interfacename, classname, singelton, config, values, depreplace) {
        'use strict';
        locator.register(interfacename, classname, config);
        _singeltons[classname] = singelton === true;
        if (values != null) {
          _allvalues[config != null ? config : locator.getConfig()][classname] = values;
        }
        if (depreplace != null) {
          return _depreplaces[classname] = depreplace;
        }
      },
      get: function(interfacename, values) {
        'use strict';
        var classname;
        classname = locator.findClass(interfacename);
        return this.getByClass(classname, values);
      },
      getByClass: function(classname, values) {
        var gotten, required;
        gotten = new Deferred();
        if (_store[classname]) {
          gotten.resolve(_ioc.instanciate(classname, values));
        } else {
          required = _ioc.require([classname]);
          required.then(function() {
            gotten.resolve(_ioc.instanciate(classname, values));
            return void 0;
          });
        }
        return gotten;
      },
      getConfig: function() {
        'use strict';
        return locator.getConfig();
      },
      setConfig: function(config) {
        'use strict';
        var _singletons;
        locator.setConfigTo(config);
        if (_alldependencies[config] == null) {
          _alldependencies[config] = {};
        }
        if (_allstores[config] == null) {
          _allstores[config] = {};
        }
        if (_allvalues[config] == null) {
          _allvalues[config] = {};
        }
        if (_allsingeltons[config] == null) {
          _allsingeltons[config] = {};
        }
        if (_allrequired[config] == null) {
          _allrequired[config] = {};
        }
        if (_alldepreplaces[config] == null) {
          _alldepreplaces[config] = {};
        }
        _dependencies = _alldependencies[config];
        _store = _allstores[config];
        _values = _allvalues[config];
        _singletons = _allsingeltons[config];
        _depreplaces = _alldepreplaces[config];
        _required = _allrequired[config];
        return null;
      }
    }))();
    return ioc;
  });

}).call(this);

//# sourceMappingURL=IoC.js.map
