// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(["clazzy/abstraction/Lang", "clazzy/Exception", "clazzy/BaseClass"], function(lang, Exception, BaseClass) {
    var Class, constructorChaining, hasProp, __extend, _getInheritance, _getNameSpace;
    hasProp = Object.prototype.hasOwnProperty;
    __extend = function(child, parent) {
      'use strict';
      var ctor, key;
      for (key in parent) {
        if (hasProp.call(parent, key)) {
          child[key] = parent[key];
        }
      }
      ctor = function() {
        this.constructor = child;
        return this;
      };
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      return child;
    };
    constructorChaining = function(child, original, args) {
      if (child.prototype.constructor.__super__) {
        constructorChaining(child.prototype.constructor.__super__.constructor, original, args);
      }
      return child.prototype.constructor.apply(original, args);
    };
    _getInheritance = function(inheritance, root) {
      'use strict';
      var parent, part, _i, _len, _ref;
      if (!inheritance) {
        parent = BaseClass;
      } else if ("function" === typeof inheritance) {
        parent = inheritance;
      } else {
        parent = root;
        _ref = inheritance.split(".");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          parent = parent[part];
        }
      }
      return parent;
    };
    _getNameSpace = function(classname, root) {
      'use strict';
      var nameSpace, ns, part, _i, _len, _ref;
      nameSpace = ns = root;
      _ref = classname.split(".");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        if (!ns[part]) {
          ns[part] = {};
        }
        nameSpace = ns;
        ns = ns[part];
      }
      return [nameSpace, part];
    };
    Class = function(classname, inheritance, interfaces, jsonObject) {
      var mixins, nameSpace, parentClass, part, root, _ref;
      if (interfaces == null) {
        interfaces = [];
      }
      if (jsonObject == null) {
        jsonObject = {};
      }
      'use strict';
      if (inheritance instanceof Array) {
        return (new Exception("TypeException", "Inheritance can not be an Array")).Throw();
      }
      if (interfaces && !(interfaces instanceof Array)) {
        return (new Exception("TypeException", "Interfaces must be an Array or null/undefined")).Throw();
      }
      root = typeof window !== "undefined" && window !== null ? window : {};
      parentClass = _getInheritance(inheritance, root);
      if (!jsonObject.hasOwnProperty('constructor')) {
        jsonObject.constructor = function() {};
      }
      interfaces = lang.filter(interfaces, function(el) {
        return el != null;
      });
      mixins = lang.filter(interfaces, function(el) {
        return "function" === typeof el;
      });
      interfaces = lang.map(interfaces, function(el) {
        if (el.classname != null) {
          return el.classname;
        }
        return el;
      });
      _ref = _getNameSpace(classname, root), nameSpace = _ref[0], part = _ref[1];
      return nameSpace[part] = (function() {
        var ProtoFn, func, key, parentProtoFn, pprop, prop, _i, _len, _ref1, _ref2;
        ProtoFn = function() {
          var originalPrototype;
          return constructorChaining(ProtoFn, originalPrototype = this, arguments);
        };
        __extend(ProtoFn, parentProtoFn = parentClass);
        for (_i = 0, _len = mixins.length; _i < _len; _i++) {
          func = mixins[_i];
          _ref1 = func.prototype;
          for (key in _ref1) {
            if (!__hasProp.call(_ref1, key)) continue;
            if (key !== "constructor") {
              ProtoFn.prototype[key] = func.prototype[key];
            }
          }
        }
        for (key in jsonObject) {
          ProtoFn.prototype[key] = jsonObject[key];
        }
        ProtoFn.prototype.constructor = jsonObject.constructor;
        ProtoFn.prototype.constructor.__super__ = parentClass.prototype;
        ProtoFn.prototype.__super__ = parentClass.prototype;
        ProtoFn.prototype._implements = function() {
          return ProtoFn.prototype.constructor.__super__._implements.call(this).concat(interfaces);
        };
        ProtoFn.prototype._fullname = function() {
          return [classname].concat(ProtoFn.prototype.constructor.__super__._fullname.call(this));
        };
        _ref2 = ProtoFn.prototype;
        for (prop in _ref2) {
          if (!__hasProp.call(_ref2, prop)) continue;
          func = _ref2[prop];
          if (!("function" === typeof func)) {
            continue;
          }
          (pprop = ProtoFn.prototype[prop]).nom = prop;
          pprop.cls = classname;
        }
        ProtoFn.prototype.declaredClass = classname;
        ProtoFn.classname = classname;
        return ProtoFn;
      })();
    };
    if (typeof window !== "undefined" && window !== null) {
      window.Class = Class;
    }
    return Class;
  });

}).call(this);

//# sourceMappingURL=Clazzy.js.map
