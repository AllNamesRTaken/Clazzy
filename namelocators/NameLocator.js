// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(["clazzy/Clazzy", "clazzy/abstraction/Lang", "clazzy/Exception"], function(Class, lang, Exception) {
    'use strict';
    var _DEFAULT;
    _DEFAULT = "default";
    return Class("clazzy.namelocators.NameLocator", null, null, {
      config: _DEFAULT,
      constructor: function() {
        this._allsources = {
          "default": {}
        };
        this._alltargets = {
          "default": {}
        };
        this._sources = {};
        this._targets = {};
        this.setConfigTo(_DEFAULT);
        return this;
      },
      configExists: function(configname) {
        if (this._allsources[configname] != null) {
          return true;
        } else {
          return false;
        }
      },
      configIsEmpty: function(configname) {
        var prop, _ref;
        _ref = this._allsources[configname];
        for (prop in _ref) {
          if (!__hasProp.call(_ref, prop)) continue;
          return false;
        }
        return true;
      },
      initConfig: function(configname) {
        if (this.configExists(configname)) {
          return;
        }
        this._allsources[configname] = {};
        return this._alltargets[configname] = {};
      },
      setConfigTo: function(configname) {
        this.config = configname;
        this.initConfig(configname);
        this._sources = this._allsources[this.config];
        return this._targets = this._alltargets[this.config];
      },
      register: function(sourceName, targetName, config) {
        if (config == null) {
          config = this.config;
        }
        this.initConfig(config);
        if (this._alltargets[config][sourceName] != null) {
          console.warn("'" + sourceName + "' was overwritten by target in config '" + (config || _DEFAULT) + "'");
        }
        this._allsources[config][targetName] = sourceName;
        return this._alltargets[config][sourceName] = targetName;
      },
      findSource: function(targetName) {
        var name, value;
        if (!targetName) {
          return (function() {
            var _ref, _results;
            _ref = this._sources;
            _results = [];
            for (name in _ref) {
              value = _ref[name];
              _results.push(value);
            }
            return _results;
          }).call(this);
        }
        if (this._sources[targetName] == null) {
          (new Exception("RegisterException", targetName + " not registered")).Throw();
        }
        return this._sources[targetName];
      },
      findTarget: function(sourceName) {
        var name, value;
        if (!sourceName) {
          return (function() {
            var _ref, _results;
            _ref = this._targets;
            _results = [];
            for (name in _ref) {
              value = _ref[name];
              _results.push(value);
            }
            return _results;
          }).call(this);
        }
        if (this._targets[sourceName] == null) {
          (new Exception("RegisterException", sourceName + " not registered")).Throw();
        }
        return this._targets[sourceName];
      },
      hasSource: function(targetName) {
        return this._sources[targetName] != null;
      },
      hasTarget: function(sourceName) {
        return this._targets[sourceName] != null;
      },
      clear: function(all) {
        var configName, currentConfig, _clear;
        currentConfig = this.config;
        _clear = lang.hitch(this, function(configName) {
          this._allsources[configName] = {};
          this._alltargets[configName] = {};
          return this.setConfigTo(configName);
        });
        if (!all) {
          return _clear(this.config);
        } else {
          for (configName in this._allsources) {
            _clear(configName);
          }
          return this.setConfigTo(currentConfig);
        }
      }
    });
  });

}).call(this);

//# sourceMappingURL=NameLocator.js.map
